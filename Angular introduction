# Angular

#### Angular structure 
 

Une application Angular peut √™tre vue comme une arborescence de components avec AppComponent comme component racine.

### Install<br>
`npm install -g @angular/cli`<br>
### Create project
`ng new snapface`
### launch the app 
```
cd snapface
ng serve --open
```
### Create component
`ng generate component face-snap`

Cette classe est d√©clar√©e avec un d√©corateur  `@Component`  √† qui on passe un objet de configuration avec un s√©lecteur, un fichier de template et un fichier de styles.
Un d√©corateur en TypeScript permet, entre autres, d'apporter des modifications √† une classe. Ici, le d√©corateur  `@Component`  vient ajouter tous les comportements n√©cessaires √† l'utilisation de ce component dans l'application. Il est import√© depuis le package  `@angular/core`. Tout se passe sous le capot, on n'a pas √† s'en occuper !
Pour le template et les styles, c'est plut√¥t simple : on dit √† Angular quels fichiers utiliser pour afficher notre component. Le s√©lecteur (avec le pr√©fixe  app-  par d√©faut), c'est ce qui va nous permettre d'ins√©rer ce component dans notre application.
Comme vous le savez, votre application est une arborescence de components avec AppComponent comme racine : c'est donc dans  app.component.html  qu'on va venir ajouter le s√©lecteur de notre nouveau component comme balise HTML :


Il y a des chances pour que votre IDE commence d√©j√† √† souligner en rouge le nom de vos attributs ici. En effet, si vous lisez l'erreur retourn√©e, c'est parce que vous avez cr√©√© des propri√©t√©s sans les initialiser. Pour "promettre" √† TypeScript qu'on va les initialiser, on peut ajouter un bang  !  √† chaque propri√©t√© : 

Pour initialiser ces propri√©t√©s en suivant les best practices Angular, vous allez utiliser la m√©thode  `ngOnInit()`  (que vous aviez supprim√©e pr√©c√©demment). Pour l'utiliser, votre component doit impl√©menter l'interface  OnInit  :

La string interpolation est la m√©thode la plus simple pour afficher le contenu d'une variable dans le template. Il suffit de mettre le nom de la variable √† afficher entre doubles accolades `{{ }}` dans le HTML . Faisons-le maintenant avec les donn√©es de notre FaceSnap. Dans  face-snap.component.html  :


L'objectif de l'application Snapface est de partager des images. Il nous faut donc un moyen d'afficher dynamiquement des images ! L'approche dans ce genre de cas sera souvent que le serveur renvoie l'URL de l'image √† afficher. Il nous faut donc un moyen de lier cette URL dynamique √† l'attribut  src  d'une balise  `<img>`  : attribute binding !


## En r√©sum√©
*	On d√©clare les propri√©t√©s d'un component en haut de sa classe, et on les initialise dans la m√©thode  `ngOnInit()`
*	La m√©thode  `ngOnInit()`  est appel√©e une fois par instance de component au moment de la cr√©ation de cette instance.
*	La string interpolation avec les doubles accolades  `{{ }}`  permet d'ins√©rer la valeur d'une propri√©t√© TypeScript dans le template.
*	L'attribute binding permet de lier la valeur d'une propri√©t√© TypeScript √† un attribut HTML, en mettant l'attribut entre crochets  `[]`  et en passant le nom de la propri√©t√©.


Il faut maintenant lier cette m√©thode au clic sur le bouton avec la liaison par √©v√©nement, ou event binding. L√† o√π vous avez utilis√© des crochets pour lier aux attributs, vous allez utiliser des parenth√®ses  `()`  pour lier aux √©v√©nements :
`<button (click)="onAddSnap()">Oh Snap!</button>`
 On utilise bien  `(click)`  et non  `(onclick)`  car on veut r√©agir √† l'√©v√©nement qui s'appelle "click" !

*	Pour lier une m√©thode √† un √©v√©nement d'un √©l√©ment du template, mettez l'√©v√©nement entre parenth√®ses ` ()`  et passez la m√©thode en argument ; ex. : `(click)="onClickButton()`"

Si vous avez des propri√©t√©s qui seront initialis√©es par les arguments pass√©s au constructor comme ci-dessus, vous pouvez retirer leurs d√©clarations et initialisations, et leur ajouter simplement le modificateur  public  dans le  constructor  :


Vous allez maintenant utiliser l'attribute binding pour lier cet objet √† la propri√©t√© personnalis√©e  faceSnap  de FaceSnapComponent dans  app.component.html  :
`<app-face-snap [faceSnap]="mySnap"></app-face-snap>`
`@Input()`  cr√©e comme un attribut HTML auquel on peut lier une valeur, tout comme vous l'avez fait avec l'attribut  src  de l'√©l√©ment image !


## En r√©sum√©
*	N'h√©sitez pas √† cr√©er vos propres types, sous forme de classe par exemple, pour faciliter la manipulation de donn√©es dans votre application.
*	Une propri√©t√© personnalis√©e est rendue injectable depuis l'ext√©rieur gr√¢ce au d√©corateur  `@Input()`
*	Une propri√©t√© en  `@Input()` est utilisable comme n'importe quelle autre propri√©t√© : on peut en afficher les √©l√©ments, les modifier‚Ä¶ 
*	On lie ensuite une valeur √† cette propri√©t√© depuis le component parent avec l'attribute binding, c'est-√†-dire le nom de la propri√©t√© entre crochets  `[]`  en passant la valeur entre les guillemets ; ex. : `[faceSnap]="mySnap"`

Mettez en place une structure dynamique
Dans une application moderne, il y aura des occasions o√π dans certains cas, vous voudrez afficher un √©l√©ment, et dans d'autres non. Par le pass√©, on a utilis√© plein de techniques pour atteindre cet objectif. Avec Angular, c'est extr√™mement simple avec la directive*ngIf.
Une directive est une classe qui vient ajouter du comportement √† l'√©l√©ment sur lequel elle est pos√©e. L'ast√©risque au d√©but du nom  *ngIf  nous montre qu'il s'agit d'une directive structurelle, qui viendra donc toucher √† la structure du document.
On passe √†  *ngIf  la condition selon laquelle l'√©l√©ment doit √™tre ajout√©. Ici, Angular √©value  faceSnap.location  comme √©tant "truthy" quand la propri√©t√© existe et qu'elle ne contient pas la cha√Æne vide (ou les valeurs  null,  false, ou  0, mais il s'agit ici d'une string). Elle est √©valu√©e comme √©tant "falsey" quand la propri√©t√© retourne undefined, c'est-√†-dire quand elle n'existe pas.
```
<p *ngIf="faceSnap.location">Photo prise √† {{ faceSnap.location }}</p>
<p *ngIf="faceSnap.location === 'Paris'">
```

pour afficher uniquement les photos prises √† Paris. On peut m√™me mettre la directive  *ngIf  sur des components. Dans  app.component.html, on pourrait imaginer un filtre pour montrer uniquement les FaceSnaps ayant plus de 5  snaps  :

```
<app-face-snap [faceSnap]="mySnap" *ngIf="mySnap.snaps > 5"></app-face-snap>
<app-face-snap [faceSnap]="myOtherSnap" *ngIf="myOtherSnap.snaps > 5"></app-face-snap>
<app-face-snap [faceSnap]="myLastSnap" *ngIf="myLastSnap.snaps > 5"></app-face-snap>
```

## En r√©sum√©
*	Vous pouvez ajouter des propri√©t√©s optionnelles √† une classe en y ajoutant un point d'interrogation  ?
*	Ajouter la directive  *ngIf  √† un √©l√©ment (qui peut aussi √™tre un component) dit √† Angular d'ajouter ou non cet √©l√©ment au DOM selon la condition que vous lui passez, par exemple  <p *ngIf="size === 'large'">

`<app-face-snap *ngFor="let faceSnap of faceSnaps" [faceSnap]="faceSnap"></app-face-snap>`
Regardons de plus pr√®s ce qui se passe exactement avec cette syntaxe :
*	la directive  *ngFor  fonctionne un peu comme une boucle  for...of  , c'est-√†-dire que, dans ce cas de figure, elle va it√©rer sur le tableau  faceSnaps  et vous exposer l'√©l√©ment correspondant √† chaque it√©ration sous l'alias  faceSnap
*	vous associez ensuite l'√©l√©ment du tableau √† la propri√©t√©  faceSnap  du component.
En r√©sum√©
*	La directive  *ngFor  vous permet d'ins√©rer un √©l√©ment dans le DOM pour chaque √©l√©ment dans un tableau.
*	La syntaxe  let element of array  vous donne acc√®s √† l'√©l√©ment de chaque it√©ration, vous permettant de l'injecter dans un component, par exemple.

Pour utiliser directement le nombre de snaps comme valeur pour le vert de la couleur de texte, vous pouvez utiliser la fonction CSS  rgb()  :
`<span [ngStyle]="{ color: 'rgb(0, ' + faceSnap.snaps + ', 0)' }">ü§å {{ faceSnap.snaps }}</span>`

`<div [ngClass]="{ 'class-name': condition }"></div>`


### En r√©sum√©
*	La directive  `[ngStyle]`  permet d'appliquer des styles qui d√©pendent de valeurs dynamiques, comme un texte qui, plus il y a de snaps, devient de plus en plus vert.
*	La directive  `[ngStyle]`  prend comme argument un objet o√π les cl√©s correspondent aux styles CSS √† modifier, et les valeurs aux valeurs que doivent prendre ces styles.
Rendez-vous au prochain chapitre pour appliquer des classes dynamiquement ! 

`[ngClass]`  prend un objet en argument, comme  `[ngStyle]`, mais dont le fonctionnement est diff√©rent :
*	les cl√©s sont les noms de classe CSS √† appliquer ;
*	les valeurs sont les conditions qui doivent √™tre remplies pour que les classes correspondantes s'appliquent.
En gros :


On applique un pipe √† une cha√Æne de caract√®res affich√©e avec la string interpolation. On rajoute le caract√®re pipe  |  puis le nom du pipe. Par exemple, si vous voulez afficher le titre des FaceSnap en majuscules, vous appliquez UpperCasePipe :
`<h2>{{ faceSnap.title | uppercase }}</h2>`
`<h2>{{ faceSnap.title | lowercase }}</h2>`
`<h2>{{ faceSnap.title | titlecase }}</h2>`


### En r√©sum√©
*	Un pipe permet de formater l'affichage d'une donn√©e sans modifier la donn√©e sous-jacente.
*	Angular fournit trois pipes pour modifier la casse affich√©e d'une cha√Æne de caract√®res : UpperCasePipe, LowerCasePipe, et TitleCasePipe pour les majuscules, les minuscules et le m√©lange type "titre".


Il est tout √† fait possible d'utiliser DatePipe comme vous avez utilis√© UpperCasePipe pr√©c√©demment, et un formatage par d√©faut sera appliqu√© :
`<p>Mis en ligne le {{ faceSnap.createdDate | date }}</p>`

C'est mieux, mais c'est pas encore √ßa.
Pour configurer un pipe, on ajoute deux-points  :  puis g√©n√©ralement une cha√Æne de caract√®res qui d√©finit la configuration. Angular nous propose quelques configurations pr√©d√©finies pour DatePipe, comme par exemple  longDate  :
`<p>Mis en ligne le {{ faceSnap.createdDate | date: 'longDate' }}</p>`
 Le format `longDate`
Vous avez √©galement la possibilit√© de cr√©er vos propres configurations en passant une cha√Æne de caract√®res qui encode votre configuration souhait√©e. Voici deux exemples :
`<p>Mis en ligne le {{ faceSnap.createdDate | date: 'dd/MM/yy, √† HH:mm' }}</p>`
 Date personnalis√©e
`<p>Mis en ligne {{ faceSnap.createdDate | date: '√† HH:mm, le d MMMM yyyy' }}</p>`
 
[DatePipe](https://angular.io/api/common/DatePipe) 

Pour changer la locale de votre application en fran√ßais, il faudra ajouter quelques lignes dans votre fichier  app.module.ts  :

```
providers: [
  { provide: LOCALE_ID, useValue: 'fr-FR'}
],
```

[i18n-common-format-data-locale](https://angular.io/guide/i18n-common-format-data-locale)


## En r√©sum√©
*	DatePipe permet de formater les dates, et sans configuration fournit un formatage par d√©faut.
*	DatePipe fournit des configurations pr√©d√©finies avec des noms comme  short,  longDate  ou  mediumTime
*	DatePipe permet √©galement de personnaliser totalement le format d'affichage des dates avec des cha√Ænes de caract√®res qui encodent le format souhait√©, par exemple  `'√† HH:mm, le d MMMM yyyy'`
 Continuons dans la d√©couverte des pipes avec un pipe qui vous permettra de formater des nombres selon les r√®gles de locale de l'application. Il y en a trois :
*	DecimalPipe ‚Äì facilite l'affichage de nombres avec des chiffres apr√®s la virgule (qui met une virgule plut√¥t qu'un point, par exemple).
*	PercentPipe ‚Äì formate les chiffres en pourcentage.
*	CurrencyPipe ‚Äì permet d'afficher des nombres sous forme de monnaie tr√®s facilement.

Si vous avez modifi√© la locale de votre application pour la passer en fran√ßais, regardez ce qui se passe quand vous ajoutez DecimalPipe avec le mot-cl√©  number  :
`<p>{{ 4346234.36 | number }}</p>`

C'est d√©j√† beaucoup mieux ! On peut aussi demander √† DecimalPipe d'arrondir pour l'affichage, par exemple √† l'entier le plus proche :
`<p>{{ 4346234.36 | number: '1.0-0' }}</p>`
La configuration signifie :
*	au moins un chiffre pour les entiers ;
*	minimum 0 chiffres apr√®s la virgule ‚Äì maximum 0 chiffres (Angular arrondira donc √† l'entier le plus proche).
Ce qui donne bien :
 
On peut aussi sp√©cifier d'arrondir √† un chiffre apr√®s la virgule en sp√©cifiant un chiffre maximum apr√®s la virgule :
`<p>{{ 4346234.36 | number: '1.0-1' }}</p>`
 

Pour transformer des nombres entre 0 et 1 en pourcentage (ex. : 0.4 = 40 %), il suffit d'utiliser PercentPipe :
`<p>{{ 0.336 | percent }}</p>`
PercentPipe arrondit par d√©faut les pourcentages √† l'entier le plus proche. Vous pouvez cependant le configurer de la m√™me mani√®re que DecimalPipe :
`<p>{{ 0.336 | percent: '1.0-1' }}</p>`
Quand les nombres dans votre application correspondent √† des montants d'argent, CurrencyPipe facilite leur affichage. Si vous utilisez l'affichage par d√©faut : 
`<p>{{ 344.36 | currency }}</p>`
 En dollars
Angular pr√©sume par d√©faut que vous parlez de dollars, et donc affiche votre montant en dollars selon les r√®gles de la locale de l'application.
Vous pouvez configurer la monnaie √† afficher :
`<p>{{ 344.36 | currency: 'EUR' }}</p>`
 En euros, ‚Ç¨

## En r√©sum√©
*	DecimalPipe (mot-cl√©  number ) vous permet d'afficher un nombre selon les r√®gles de la locale de l'application.
*	PercentPipe affiche un nombre entre 0 et 1 sous forme de pourcentage, arrondi par d√©faut √† l'entier le plus proche.
*	DecimalPipe et PercentPipe acceptent un argument de configuration sous la forme 'chiffresMinAvantVirgule.chiffresMinApr√®sVirgule-chiffresMaxApr√®sVirgule' ex. :  '1.0-1'
*	CurrencyPipe facilite l'affichage des montants d'argent, et accepte plusieurs arguments de configuration s√©par√©s par des deux-points  :


Vous allez maintenant cr√©er un service qui va centraliser toutes les interactions avec les FaceSnaps, afin que tous les √©ventuels components de votre application d√©pendent des m√™mes donn√©es.
Dans le dossier  app, cr√©ez un dossier  services  et dedans un fichier  face-snaps.service.ts.
Un service est une classe, et la fa√ßon la plus simple de d√©clarer une classe comme √©tant un service est d'utiliser le d√©corateur  `@Injectable()`  qui s'importe depuis  `@angular/core  :
import { Injectable } from '@angular/core'`;

```
@Injectable({
  providedIn: 'root
})
export class FaceSnapsService {
}
```
L'objet de configuration qui sp√©cifie  `providedIn: 'root'`  dit √† Angular d'enregistrer ce service √† la racine de l'application. Ce sera tr√®s souvent le cas pour vos services, car √ßa permet de s'assurer de n'avoir qu'une seule instance du service, partag√©e par tous les partis int√©ress√©s.

Pour pouvoir utiliser un service dans un component, il faut utiliser le syst√®me d'injection de d√©pendances (dependency injection ou DI) que vous fournit Angular. C'est tr√®s simple : vous passez un argument du type du service au constructor du component, et Angular vous mettra √† disposition la bonne instance du service. Concr√®tement pour votre application, dans `FaceSnapListComponent` :
`import { FaceSnapsService } from '../services/face-snaps.service';`
//...
`constructor(private faceSnapsService: FaceSnapsService) { }`
Pour rappel, ajouter un modificateur d'acc√®s comme  public  ou  private  √† un argument du  constructor  cr√©e une propri√©t√© avec ce nom-l√† dans la classe. Vous aurez donc acc√®s au service via la propri√©t√©  faceSnapsService.
On pr√©f√®re g√©n√©ralement  private  pour les injections de service, car √ßa emp√™che le template du component d'y acc√©der directement. Donner au template acc√®s aux injections serait un anti-pattern Angular ‚Äì autrement dit, une approche plus que d√©conseill√©e, souvent pour des raisons qui ne sont pas flagrantes au premier abord.


Maintenant que vous avez acc√®s au service, vous pouvez modifier l'initialisation de la propri√©t√©  faceSnaps  du component pour y attribuer le tableau du service :
```
ngOnInit(): void {
    this.faceSnaps = this.faceSnapsService.faceSnaps;
}
```
Et votre application refonctionne, sauf que maintenant elle utilise les donn√©es du service ! √áa veut dire qu'√† l'avenir, vous pourriez r√©cup√©rer ces donn√©es depuis un serveur, par exemple. Pour cela, il faut de la logique, des m√©thodes, donc dans le prochain chapitre, vous verrez comment partager des m√©thodes dans votre service.
## En r√©sum√©
*	Les services permettent de centraliser les donn√©es et la logique pour les diff√©rents domaines de votre application.
*	Cr√©er un service est aussi simple qu'ajouter le d√©corateur  `@Injectable()`  √† une classe.
*	Pour injecter un service dans un component, ajoutez un argument au constructor du component qui a le type du service, par exemple private userService: UserService
```
snapFaceSnapById(faceSnapId: number, snapType: string): void {
    const faceSnap = this.getFaceSnapById(faceSnapId);
    snapType === 'snap' ? faceSnap.snaps++ : faceSnap.snaps--;
}
```
Cette m√©thode utilise  `getFaceSnapById()`  pour r√©cup√©rer le FaceSnap, et si le deuxi√®me argument est  'snap', rajoute un snap ; sinon, elle enl√®ve un snap.
Cependant, on pourrait passer n'importe quelle cha√Æne de caract√®res √† cette m√©thode. Afin de limiter les possibilit√©s √† des options s√©mantiques, on peut remplacer le type  string  par un literal type :
`snapFaceSnapById(faceSnapId: number, snapType: 'snap' | 'unsnap'): void {`

## En r√©sum√©
*	Centraliser les interactions dans un service sous forme de m√©thodes cr√©e une structure plus modulaire, qui facilite la maintenance et les √©volutions de votre application.
*	Comme dans toute base de code, refactorisez pour √©viter de r√©p√©ter des blocs de code (le principe DRY : Don't Repeat Yourself).
*	Les literal types permettent de cr√©er rapidement des types personnalis√©s, souvent utilis√©s pour limiter les choix pour un argument de m√©thode, par exemple : `fileType: 'image' | 'video'`


   
